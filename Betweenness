import numpy as np
import pandas as pd
import networkx as nx
import geopandas as gpd
import matplotlib.pyplot as plt


#general workspace settings
myworkspace="C:/Users/yanni/Desktop/HS20/Network_Sciences/DATA"

#input data: the csv file for nodes and edges
nodesfile = myworkspace+"/zh_nodes/zh_nodes.shp"
edgesfile = myworkspace+"/zh_roads/zh_roads.shp"
floodededgesfile = myworkspace+"/zh_roads_flooded/zh_roads_flooded.shp"
floodednodesfile = myworkspace+"/zh_nodes_flooded/zh_nodes_flooded.shp"
floodmap = myworkspace+"/WB_HW_IK100_F_LV03dissolve/WB_HW_IK100_F_LV03dissolve.shp"

#input data: the roads file
nodesgdf = gpd.read_file(nodesfile) #read data into a geo pandas dataframe
edgesgdf = gpd.read_file(edgesfile)

#input data: the flooded nodes and roads files
floodednodesgdf = gpd.read_file(floodednodesfile)
floodededgesgdf = gpd.read_file(floodededgesfile)

#create lists of flooded nodes and flooded edges (will not be part of the created graph)
listoffloodednodes=floodednodesgdf["nodeid"].unique().tolist() #list with id of all flooded nodes/ unique = no double counting / without tolist() it would stay an array
listoffloodededges=floodededgesgdf["ID_Road"].unique().tolist()
print(str(len(listoffloodednodes))+" nodes are flooded") #lenght says how many nodes are in the list = nodes that are flooded
print(str(len(listoffloodededges))+" road segments are flooded")

#output data: betweenness centrality file for the normal situation and the flooded situation
nodesbetweennesscentralityfilenormal = open(myworkspace+"/betweennesscentrality_normalsituation.csv","w") #create output file for normal situation ["w" = set to writing mode]
nodesbetweennesscentralityfilenormal.write("nodeid"+";"+"betweennesscentrality"+"\n") #write the header of the new created file

nodesbetweennesscentralityfileflood = open(myworkspace+"/betweennesscentrality_floodsituation.csv","w") #create output fale for normal situation ["w" = set to writing mode]
nodesbetweennesscentralityfileflood.write("nodeid"+";"+"betweennesscentrality"+"\n") #write the header of the new created file


#create graph that does not contain flooded nodes and flooded edges
Gflood = nx.Graph()
nodesidlist=[]
edgesidlist=[]
#loop through the road shapefile = geopandas dataframe of edges
counter = 0
for index, row in edgesgdf.iterrows():
    if row.ID_Road not in listoffloodededges: #graph should not contain flooded nodes ad edges
        print(counter)
        length = row.SHAPE_Leng
        nodeid1 = row.nodeid1
        nodeid2 = row.nodeid2
        if row.nodeid1 not in listoffloodednodes: #here are the flooded nodes that have oto be excluded --> we check here if a node is not flooded and if that's the case we add coordinates to the grap of this node
            xcoord = nodesgdf[nodesgdf["nodeid"] == row.nodeid1].x
            ycoord = nodesgdf[nodesgdf["nodeid"] == row.nodeid1].y
            if row.nodeid1 not in Gflood:
                Gflood.add_node(row.nodeid1, pos=(xcoord, ycoord)) #here the node is added
                nodesidlist.append(row.nodeid1)
        if row.nodeid2 not in listoffloodednodes: #same is done for the second node of the road segment
            xcoord = nodesgdf[nodesgdf["nodeid"] == row.nodeid2].x
            ycoord = nodesgdf[nodesgdf["nodeid"] == row.nodeid2].y
            if row.nodeid2 not in Gflood:
                Gflood.add_node(row.nodeid2, pos=(xcoord, ycoord)) #add to the graph as node
                nodesidlist.append(row.nodeid2)
        edgesidlist.append(row.ID_Road) #node segments are appended to the egeslist
        if row.nodeid1 not in listoffloodednodes and row.nodeid2 not in listoffloodednodes:
            Gflood.add_edge(row.nodeid1, row.nodeid2, weight=length) #add to the graph as edge
        counter+=1
print("network graph created ...")

#create graph
Gnormal = nx.Graph()
#loop through the road shapefile
for index, row in edgesgdf.iterrows():
    length = row.SHAPE_Leng #lenght from dataframe is used
    nodeid1 = row.nodeid1
    nodeid2 = row.nodeid2
    xcoord1 = nodesgdf[nodesgdf["nodeid"] == row.nodeid1].x
    ycoord1 = nodesgdf[nodesgdf["nodeid"] == row.nodeid1].y
    Gnormal.add_node(row.nodeid1, pos=(xcoord1, ycoord1))
    xcoord2=nodesgdf[nodesgdf["nodeid"] == row.nodeid2].x
    ycoord2 = nodesgdf[nodesgdf["nodeid"] == row.nodeid2].y
    Gnormal.add_node(row.nodeid2, pos=(xcoord2, ycoord2))
    Gnormal.add_edge(row.nodeid1, row.nodeid2, weight=length) #in the end the graph consists now of the nodes and edges
print("network graph created ...")

#calculate betweenness centrality for all nodes and write it to the output file
#Betweenness centrality of a node v is the sum of the fraction of all-pairs shortest paths that pass through v.
#parameter k is the number of the sample to safe time, k=1000 --> ca. 1% of the total network is taken as a sample
#if k=None or not specified (as here), the full network will be considered.
betweennesscentrality_normal = nx.betweenness_centrality(Gnormal, normalized=True, endpoints=True)
print("betweenness centrality normal situation for nodes in ZH traffic network computed ...")

for n in betweennesscentrality_normal:
    nodesbetweennesscentralityfilenormal.write(str(n)+";"+str(betweennesscentrality_normal[n])+"\n")
nodesbetweennesscentralityfilenormal.close()
print("betweenness centrality normal situation for nodes in ZH traffic network exported to file ...")

betweennesscentrality_flood = nx.betweenness_centrality(Gflood, normalized=True, endpoints=True)
print("betweenness centrality flood situation for nodes in ZH traffic network computed ...")

for n in betweennesscentrality_flood:
    nodesbetweennesscentralityfileflood.write(str(n)+";"+str(betweennesscentrality_flood[n])+"\n")
nodesbetweennesscentralityfileflood.close()
print("betweenness centrality for nodes in ZH traffic network computed and exported to file ...")
